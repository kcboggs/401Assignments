#!/user/bin/env python3
#------------------------------------------------------#
# Script Name                Ops Challenge 32
# Author                     Kimberley Cabrera-Boggs
# Date of last revision      November 17, 2020
# Description of purpose     Malware Detection Part 2
#------------------------------------------------------#
print("""
███╗   ███╗ █████╗ ██╗     ██╗    ██╗ █████╗ ██████╗ ███████╗    
████╗ ████║██╔══██╗██║     ██║    ██║██╔══██╗██╔══██╗██╔════╝    
██╔████╔██║███████║██║     ██║ █╗ ██║███████║██████╔╝█████╗      
██║╚██╔╝██║██╔══██║██║     ██║███╗██║██╔══██║██╔══██╗██╔══╝      
██║ ╚═╝ ██║██║  ██║███████╗╚███╔███╔╝██║  ██║██║  ██║███████╗    
╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝ ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝    
                                                                 
██████╗ ███████╗████████╗███████╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗
██╔══██╗██╔════╝╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║
██║  ██║█████╗     ██║   █████╗  ██║        ██║   ██║██║   ██║██╔██╗ ██║
██║  ██║██╔══╝     ██║   ██╔══╝  ██║        ██║   ██║██║   ██║██║╚██╗██║
██████╔╝███████╗   ██║   ███████╗╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║
╚═════╝ ╚══════╝   ╚═╝   ╚══════╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝                                                                    
Part 2
""")
#----------------------Import Libraries----------------#
import hashlib,datetime, os
import getpass
from time import sleep
#-------------------------Function---------------------#
# Search user input for specified folder
def get_hashcode():
    folderName = input("Enter the folder you want to scan? ")
    output_search(folderName)
# Get current time stamp
def get_time():
    dateTimeObj = datetime.datetime.now()
    timestampStr = dateTimeObj.strftime("%b-%d-%Y-%H:%M:%S")
    return timestampStr
# Output final results
def output_search(pt):
    user = getpass.getuser()
    if(pt == "~/"):
        abs_path = f"C:/User/{user}"
    else:
        abs_path = os.path.abspath(pt)
    print("Timestamp   File-name   Hash-code   Size   File-path")
    for root, dirs, files in os.walk(abs_path):
            for filo in files:
                try:
                    full_path= os.path.join(root, filo)
                    hash_value = hash_co(full_path)
                    print(f"{get_time()} {filo} {hash_value}   {os.path.getsize(full_path)}   {full_path}")
                    sleep(1.5)
                except Exception as msg:
                    print(msg)
                    continue
# Getting the hash code
def hash_co(fn):
    md_hash = hashlib.md5()
    with open(fn, "rb") as f:
        for byte_block in iter(lambda: f.read(4896),b""):
            md_hash.update(byte_block)
    f.close()
    return md_hash.hexdigest()
get_hashcode()

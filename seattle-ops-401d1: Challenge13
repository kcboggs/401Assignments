#!/user/bin/env python3
#----------------------------------------------------------------------#
# Script Name                Ops Challenge 13
# Author                     Kimberley Cabrera-Boggs
# Date of last revision      October 21, 2020
# Description of purpose     Network Security Tool w/Scapy Part 1, 2 & 3
#----------------------------------------------------------------------#
#   ,-~~-.___.
#  / |  '     \
# (  )         0
#  \_/-, ,----'
#     ====           //
#    /  \-'~;    /~~~(O)            
#   /  __/~|   /       |
# =(  _____| (_________|

#--------------------------Import Libraries--------------------#
import ipaddress
import sys
import socket
import random
from scapy.all import sr1,IP,ICMP,TCP,ARP,Ether,srp

#--------------------------Declare variable--------------------#
def interface():
    user_choice = input("""
    Which part do you want to perform?
    1. part1 lab
    2. part2 lab
    3. part3 lab
    4. Exit
    """)

    if(user_choice == "1"):
        part1_lab(input("Please enter your ip: "))
    elif(user_choice == "2"):
        part2_lab()
    elif(user_choice == "3"):
        part3_lab()
    else:
        print("Exiting....")
        exit()
def part1_lab(host):
    if host == None:
        return
    host_count = 0
    port_range = [21, 22, 23]
    src_port = 22
    dst_port = 22

#--------------------------(dst=host) which is--------------------#
    response = sr1(IP(dst=host)/TCP(sport=src_port,dport=dst_port,flags="S"),timeout=1,verbose=0)
#--------------------------Function-------------------------------#
    for dst_port in port_range:
        src_port = random.randint(1025,65534)
        if response is None:
            print("packet filtered")
        elif(response.haslayer(TCP)):
            if(response.getlayer(TCP).flags == 0x12): 
                #----------port responding and open---------------#
                print("Port " + str(dst_port) + " is open")
            elif (response.getlayer(TCP).flags == 0x14):
                #----------port responding and closed-------------#
                print("Port " + str(dst_port) + " is closed")
            else:
                #----------Filter port and drop-------------------#
                print("The port is filtered and dropped")
def part2_lab():
    network = input("Enter your network address with the CIDR block code: ")
    addresses = ipaddress.IPv4Network(network)
    host_count = 0
    for host in addresses:
        if (host in (addresses.network_address, addresses.broadcast_address)):
            continue
        resp = sr1(
            IP(dst=str(host))/ICMP(),
            timeout=2,
            verbose=0,
        )
        if resp is None:
            print(f"{host} is down or not responding.")
        elif (
            int(resp.getlayer(ICMP).type)==3 and
            int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13]
        ):
            print(f"{host} is blocking ICMP.")
        else:
            print(f"{host} is responding.")
            host_count += 1
    print(f"{host_count}/{addresses.num_addresses} hosts are online.")
def part3_lab():
    request = ARP()
    request.pdst = input("Enter your ip with the CIDR block: ")
    broadcast = Ether()
    broadcast.dst = 'ff:ff:ff:ff:ff:ff'
    request_broadcast = broadcast / request
    clients = srp(request_broadcast, timeout = 1)[0]
    for element in clients:
         part1_lab(element[1].psrc)
         print(element[1].psrc + "      " + element[1].hwsrc)

#----------------------------Main--------------------------------#
while True:
    interface()
#----------------------------End---------------------------------#
